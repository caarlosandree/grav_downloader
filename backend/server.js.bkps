const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch'); // Para Node.js < 18. Se usando Node.js >= 18, pode remover e usar o fetch global.
const fs = require('fs-extra'); // Para lidar com sistema de arquivos (criar diretórios recursivamente, limpar)
const path = require('path'); // Para lidar com caminhos de arquivos
const archiver = require('archiver'); // Para zipar arquivos
const os = require('os'); // Para obter o diretório temporário do sistema

const app = express();
const port = 3000; // Porta que o backend vai "ouvir"

// Middlewares
app.use(cors()); // Permite requisições de outras origens (seu frontend)
app.use(express.json()); // Permite que o Express leia JSON no corpo das requisições

// --- Rota de Teste para Enviar um Arquivo de Texto Simples ---
app.post('/download-batch', async (req, res) => {
    console.log('Requisição de download em lote recebida (TESTE DE ARQUIVO DE TEXTO).');
    const recordings = req.body;

    if (!recordings || !Array.isArray(recordings) || recordings.length === 0) {
        console.log('Nenhuma gravação fornecida na requisição.');
        return res.status(400).json({ error: 'Nenhuma gravação fornecida.' });
    }

    console.log(`Recebidas ${recordings.length} gravações para processar (TESTE DE ARQUIVO DE TEXTO).`);

    // Conteúdo simples para o arquivo de texto de teste
    const testContent = `Este é um arquivo de texto de teste.\nNúmero de gravações recebidas: ${recordings.length}\n`;
    const filename = 'teste_download.txt';

    // Configura os cabeçalhos para enviar um arquivo de texto
    res.setHeader('Content-Type', 'text/plain');
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('Content-Length', Buffer.byteLength(testContent)); // Define o tamanho do conteúdo

    // Envia o conteúdo como a resposta
    res.end(testContent);

    console.log(`Arquivo de texto "${filename}" enviado para o frontend.`);

    // Nota: Neste teste simples, não há diretórios temporários para limpar.
    // A lógica de limpeza no finally ou nos eventos res.on() do código anterior foi removida temporariamente com a rota.
});


// --- Inicia o servidor (mantém esta parte) ---
app.listen(port, () => {
    console.log(`Backend rodando em http://localhost:${port}`);
    console.log('Aguardando requisições (Modo de Teste de Arquivo de Texto)...');
});